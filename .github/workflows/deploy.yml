name: Deploy to EC2

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"] # build.yml이 성공하면 실행
    types:
      - completed

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/apply_server:latest
      INSTANCE_ID: i-07ba72dcda24dffc1 # EC2 인스턴스 ID (배포 대상)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::867344471687:role/release
          aws-region: ap-northeast-2
          output-credentials: true

      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy new Docker image from Docker Hub with environment variables" \
            --parameters commands="
              echo 'POSTGRES_DB=${{ secrets.POSTGRES_DB }}' > /home/ssm-user/.env;
              echo 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' >> /home/ssm-user/.env;
              echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> /home/ssm-user/.env;
              echo 'POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}' >> /home/ssm-user/.env;
              echo 'POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}' >> /home/ssm-user/.env;
              echo 'AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}' >> /home/ssm-user/.env;
              echo 'AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}' >> /home/ssm-user/.env;
              echo 'DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}' >> /home/ssm-user/.env;
              chmod 600 /home/ssm-user/.env;
              docker login -u '${{ env.DOCKERHUB_USERNAME }}' -p '${{ secrets.DOCKERHUB_PASSWORD }}';
              docker pull ${{ env.DOCKER_IMAGE }};
              docker stop myapp || true;
              docker rm myapp || true;
              docker run -d --name myapp -p 80:8000 --env-file /home/ssm-user/.env ${{ env.DOCKER_IMAGE }};
            " \
            --max-concurrency "1" \
            --region ap-northeast-2
